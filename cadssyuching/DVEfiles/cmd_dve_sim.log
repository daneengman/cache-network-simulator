ucliGUI::start /afs/ece.cmu.edu/usr/dengman/private/cache-network-simulator/cadssyuching/simv -ucligui 
set ucliGUI::state
set ucliGUI::state
ucliCore::getToolPID
synopsys::env hasTB
trigger_hier_stack_context_switch 0
synopsys::xml set_array_limit <data limit="50" />
synopsys::xml set_depth_limit <data limit="100" />
synopsys::xml set_string_limit <data limit="1000" />
synopsys::xml set_only_active_frame <data value="1" />
synopsys::xml set_variable_frame_id <data value="1" />
synUtils::setDVEInitPhase 1
synopsys::dump -type VPD -file /afs/ece.cmu.edu/usr/dengman/private/cache-network-simulator/cadssyuching/inter.vpd -locking
synopsys::dump -autoflush on -fid VPD2
set ::dve_fid VPD2
synUtils::setDVEInitPhase 0
ucliCore::getToolPID
synUtils::sendTool -active _icl_setToolSocket /tmp/smlnp6OOGUX
synUtils::sendTool -active {_icl_start_rpc -version "K-2015.09_Full64" -sync_file /tmp/vcs_dve_rpc.dengman.126117}
synUtils::sendTool -active {_icl_createSharedMemory /tmp/vcs_dve_general.dengman.126117}
config endofsim noexit
config onfail enable all
config syscaddplainmembers
config syscaddsourcenames
config syscaddstructtypes
synopsys::listing -disable
# Begin_DVE_Session_Save_Info
# DVE restart session
# Saved on Sun May 5 19:30:08 2024
# Designs open: 1
#   Sim: /afs/ece.cmu.edu/usr/dengman/private/cache-network-simulator/cadssyuching/simv
# Toplevel windows open: 2
# 	TopLevel.1
# 	TopLevel.2
#   Source.1: NetworkPkg
#   Wave.1: 72 signals
#   Group count = 6
#   Group cadss_interconnect signal count = 16
#   Group interconnect signal count = 12
#   Group genblk1[0].n signal count = 11
#   Group genblk1[1].n signal count = 11
#   Group genblk1[2].n signal count = 11
#   Group genblk1[3].n signal count = 11
# End_DVE_Session_Save_Info
# DVE version: K-2015.09_Full64
# DVE build date: Aug 25 2015 21:36:02
#<Session mode="Restart" path=".restartSimSession.tcl" type="Debug">
# Application preferences
#<WindowLayout>
# DVE top-level session
# Create and position top-level window: TopLevel.1
set TopLevel.1 TopLevel.1
# Docked window settings
set HSPane.1 HSPane.1
set Hier.1 Hier.1
set Stack.1 Stack.1
set Class.1 Class.1
set Object.1 Object.1
set DLPane.1 DLPane.1
set Data.1 Data.1
set Local.1 Local.1
set Member.1 Member.1
# MDI window settings
set Console.1 Console.1
set Source.1 Source.1
# End MDI window settings
# Create and position top-level window: TopLevel.2
set TopLevel.2 TopLevel.2
# Docked window settings
# MDI window settings
set Wave.1 Wave.1
# End MDI window settings
#</WindowLayout>
#<Database>
#</Database>
# DVE Global setting session:
# Global: Breakpoints
# Global: Bus
# Global: Expressions
# Global: Signal Time Shift
# Global: Signal Compare
# Global: Signal Groups
synopsys::dump -add {cadss_interconnect.interconnect} -scope "." -depth 1 -fid VPD2
synopsys::dump -add {{cadss_interconnect.interconnect.genblk1[0].n}} -scope "." -depth 1 -fid VPD2
synopsys::dump -add {{cadss_interconnect.interconnect.genblk1[1].n}} -scope "." -depth 1 -fid VPD2
synopsys::dump -add {{cadss_interconnect.interconnect.genblk1[2].n}} -scope "." -depth 1 -fid VPD2
set _session_group_7 cadss_interconnect
set cadss_interconnect "$_session_group_7"
set _session_group_8 interconnect
set interconnect "$_session_group_8"
set _session_group_9 {genblk1[0].n}
set {genblk1[0].n} "$_session_group_9"
set _session_group_10 {genblk1[1].n}
set {genblk1[1].n} "$_session_group_10"
set _session_group_11 {genblk1[2].n}
set {genblk1[2].n} "$_session_group_11"
set _session_group_12 {genblk1[3].n}
set {genblk1[3].n} "$_session_group_12"
# Global: Highlighting
# Global: Stack
# Post database loading setting...
# Save global setting...
# Wave/List view global setting
# Close all empty TopLevel windows
foreach __top [gui_ekki_get_window_ids -type TopLevel] {     if { [llength [gui_ekki_get_window_ids -parent $__top]] == 0} {         gui_close_window -window $__top     } }
# DVE View/pane content session:
# Hier 'Hier.1'
catch {gui_list_select -id ${Hier.1} {cadss_interconnect}}
# Class 'Class.1'
# Member 'Member.1'
# Data 'Data.1'
# Source 'Source.1'
# Warning: Class view not found.
# View 'Wave.1'
set groupExD [gui_get_pref_value -category Wave -key exclusiveSG]
set origWaveHeight [gui_get_pref_value -category Wave -key waveRowHeight]
set origGroupCreationState [gui_list_create_group_when_add -wave]
synopsys::dump -add {cadss_interconnect.NUM_PROC cadss_interconnect.SERVER_PORT cadss_interconnect.core_clk cadss_interconnect.finished_request cadss_interconnect.inFlight cadss_interconnect.interconnect_clk cadss_interconnect.new_request cadss_interconnect.packetReceived cadss_interconnect.packetSendIn cadss_interconnect.processed_request cadss_interconnect.processor_request_in cadss_interconnect.request cadss_interconnect.request_in_avail cadss_interconnect.request_out_avail cadss_interconnect.rst_l cadss_interconnect.tickCount } -aggregates  -fid VPD2
synopsys::dump -add {{cadss_interconnect.interconnect.genblk1[3].n.clk} {cadss_interconnect.interconnect.genblk1[3].n.empty} {cadss_interconnect.interconnect.genblk1[3].n.full} {cadss_interconnect.interconnect.genblk1[3].n.nodeID} {cadss_interconnect.interconnect.genblk1[3].n.packetIn} {cadss_interconnect.interconnect.genblk1[3].n.packetOut} {cadss_interconnect.interconnect.genblk1[3].n.packetRecieved} {cadss_interconnect.interconnect.genblk1[3].n.packetSendIn} {cadss_interconnect.interconnect.genblk1[3].n.packetSendNext} {cadss_interconnect.interconnect.genblk1[3].n.recieved} {cadss_interconnect.interconnect.genblk1[3].n.rst_l} } -aggregates  -fid VPD2
if {$origGroupCreationState} { 	gui_list_create_group_when_add -wave -enable }
if { $groupExD } {  gui_msg_report -code DVWW028 }
# Restore toplevel window zorder
# The toplevel window could be closed if it has no view/pane
if {[gui_exist_window -window ${TopLevel.1}]} { 	gui_set_active_window -window ${TopLevel.1} 	gui_set_active_window -window ${Source.1} 	gui_set_active_window -window ${HSPane.1} }
if {[gui_exist_window -window ${TopLevel.2}]} { 	gui_set_active_window -window ${TopLevel.2} 	gui_set_active_window -window ${Wave.1} }
#</Session>
synopsys::run
set ucliGUI::state
set ucliGUI::state
set synopsys::env(time) 9250
set synopsys::env(time) 26050
set ucliGUI::state
set ucliGUI::state
